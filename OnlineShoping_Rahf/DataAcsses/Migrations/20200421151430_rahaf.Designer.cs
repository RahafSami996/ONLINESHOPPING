// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineShoppingSystem.Models;

namespace DataAcsses.Migrations
{
    [DbContext(typeof(OnlineShopingDbContext))]
    [Migration("20200421151430_rahaf")]
    partial class rahaf
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAcsses.Entity.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<int>("orderid");

                    b.Property<int>("productcolorsizeId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("orderid");

                    b.HasIndex("productcolorsizeId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("DataAcsses.Entity.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new { Id = 1, Name = "Drafet" },
                        new { Id = 2, Name = "OnWork" },
                        new { Id = 3, Name = "Completed" }
                    );
                });

            modelBuilder.Entity("DataAcsses.Entity.ProductColorSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColorId");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quentity");

                    b.Property<int>("SizeId");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductColorSizes");
                });

            modelBuilder.Entity("DataAcsses.Entity.SellerAdress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<int>("CountryId");

                    b.Property<int>("SellerId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("SellerId");

                    b.ToTable("SellerAdresses");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.ApplicationClim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = 1, ConcurrencyStamp = "23bb18ef-26f0-49a5-b87b-4466a4fc758a", Name = "Admin" },
                        new { Id = 2, ConcurrencyStamp = "30043a73-7d9e-4392-ac30-4ff6b6e6ab47", Name = "Seller" },
                        new { Id = 3, ConcurrencyStamp = "875e1456-ea73-4d84-b6d9-ed2d3385c422", Name = "User" }
                    );
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.ApplicationRoleClime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.ApplicationUSerToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.CardsPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AvailableCredit");

                    b.Property<double>("CellingOfOrder");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<string>("Name");

                    b.Property<int>("StatusId");

                    b.Property<double>("TotalCreditAmount");

                    b.Property<int>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserID");

                    b.ToTable("CardsPayments");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OrderId");

                    b.Property<int>("ProductID");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new { Id = 1, CountryId = 1, Name = "Amman" },
                        new { Id = 2, CountryId = 1, Name = "Irbid" },
                        new { Id = 3, CountryId = 1, Name = "Zarqa" },
                        new { Id = 4, CountryId = 2, Name = "alquds" },
                        new { Id = 5, CountryId = 2, Name = "Areha" },
                        new { Id = 6, CountryId = 2, Name = "Gaza" },
                        new { Id = 7, CountryId = 3, Name = "Baqdad" },
                        new { Id = 8, CountryId = 3, Name = "Mosul" },
                        new { Id = 9, CountryId = 3, Name = "Basrah" },
                        new { Id = 10, CountryId = 4, Name = "Cairo" },
                        new { Id = 11, CountryId = 4, Name = "Alexandria" },
                        new { Id = 12, CountryId = 4, Name = "Aswan" }
                    );
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorName");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new { Id = 1, ColorName = "Black" },
                        new { Id = 2, ColorName = "Whaite" },
                        new { Id = 3, ColorName = "Brown" },
                        new { Id = 4, ColorName = "Red" },
                        new { Id = 5, ColorName = "Pink" }
                    );
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new { Id = 1, Name = "Jordan" },
                        new { Id = 2, Name = "Palstian" },
                        new { Id = 3, Name = "Iraq" },
                        new { Id = 4, Name = "Egypt" }
                    );
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<int>("Max");

                    b.Property<int>("Min");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType");

                    b.Property<byte[]>("Data");

                    b.Property<string>("Name");

                    b.Property<int?>("ProductId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DiscountId");

                    b.Property<double?>("NetTotalPrice");

                    b.Property<int>("OrderStatesId");

                    b.Property<int?>("TaxId");

                    b.Property<double?>("TotalPrice");

                    b.Property<int?>("USerAddressId");

                    b.Property<int>("UserId");

                    b.Property<int?>("cardPayment");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OrderStatesId");

                    b.HasIndex("TaxId");

                    b.HasIndex("USerAddressId");

                    b.HasIndex("UserId");

                    b.HasIndex("cardPayment");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.ProductRollsAdress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId");

                    b.Property<int?>("CountryId");

                    b.Property<int?>("MaxProduct");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductRollsAdresses");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<int>("Quantity");

                    b.Property<int>("SeasonId");

                    b.Property<int>("SellerID");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SellerID");

                    b.HasIndex("TypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.RoleUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleUserGroupId");

                    b.Property<int>("UserRoleId");

                    b.Property<int>("Userid");

                    b.HasKey("Id");

                    b.HasIndex("RoleUserGroupId");

                    b.HasIndex("Userid");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.RoleUserGroup", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("RoleUserGroups");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.Seasons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Seasons");

                    b.HasData(
                        new { Id = 1, Name = "Winter" },
                        new { Id = 2, Name = "Summer" },
                        new { Id = 3, Name = "Spring" },
                        new { Id = 4, Name = "Autuom" }
                    );
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SizeNumber");

                    b.HasKey("Id");

                    b.ToTable("sizes");

                    b.HasData(
                        new { Id = 1, SizeNumber = 35 },
                        new { Id = 2, SizeNumber = 36 },
                        new { Id = 3, SizeNumber = 37 },
                        new { Id = 4, SizeNumber = 38 },
                        new { Id = 5, SizeNumber = 39 },
                        new { Id = 6, SizeNumber = 40 }
                    );
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new { Id = 1, Name = "Active" },
                        new { Id = 2, Name = "UnActive" }
                    );
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.TypeOfLeather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName");

                    b.HasKey("Id");

                    b.ToTable("typeOfLeathers");

                    b.HasData(
                        new { Id = 1, TypeName = "COttn" },
                        new { Id = 2, TypeName = "fiLt" },
                        new { Id = 3, TypeName = "silK" },
                        new { Id = 4, TypeName = "WOOL" },
                        new { Id = 5, TypeName = "satin" },
                        new { Id = 6, TypeName = "suede" }
                    );
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("CityId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int?>("CountryId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("Password");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.UserAdress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("CityId");

                    b.Property<int>("CountryId");

                    b.Property<int>("USerId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("USerId");

                    b.ToTable("UserAdresses");
                });

            modelBuilder.Entity("DataAcsses.Entity.OrderProduct", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineShoppingSystem.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAcsses.Entity.ProductColorSize", "ProductColorSize")
                        .WithMany()
                        .HasForeignKey("productcolorsizeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAcsses.Entity.ProductColorSize", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.Color", "Color")
                        .WithMany("ProductColorSizes")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineShoppingSystem.Models.Products", "Products")
                        .WithMany("ProductColorSizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineShoppingSystem.Models.Size", "Size")
                        .WithMany("ColorSize")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAcsses.Entity.SellerAdress", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.City", "City")
                        .WithMany("SellerAdresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineShoppingSystem.Models.Country", "Country")
                        .WithMany("SellerAdresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineShoppingSystem.Models.User", "User")
                        .WithMany("SellerAdresses")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.ApplicationClim", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.ApplicationRoleClime", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.ApplicationUserLogin", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineShoppingSystem.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.ApplicationUSerToken", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.CardsPayment", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.Status", "Status")
                        .WithMany("CardsPayments")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineShoppingSystem.Models.User", "User")
                        .WithMany("cardsPayments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.Cart", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("OnlineShoppingSystem.Models.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineShoppingSystem.Models.User", "user")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.City", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.Country", "Country")
                        .WithMany("ListOfCity")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.Discount", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.Image", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.Products", "products")
                        .WithMany("ListOfImage")
                        .HasForeignKey("ProductId");

                    b.HasOne("OnlineShoppingSystem.Models.User", "user")
                        .WithMany("Images")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.Order", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.Discount")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountId");

                    b.HasOne("DataAcsses.Entity.OrderStatus", "OrderStatus")
                        .WithMany("order")
                        .HasForeignKey("OrderStatesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineShoppingSystem.Models.Tax")
                        .WithMany("Orders")
                        .HasForeignKey("TaxId");

                    b.HasOne("OnlineShoppingSystem.Models.UserAdress", "UserAdress")
                        .WithMany()
                        .HasForeignKey("USerAddressId");

                    b.HasOne("OnlineShoppingSystem.Models.User", "user")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineShoppingSystem.Models.CardsPayment", "CardsPayment")
                        .WithMany()
                        .HasForeignKey("cardPayment");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.ProductRollsAdress", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("OnlineShoppingSystem.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("OnlineShoppingSystem.Models.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.Products", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.Seasons", "Season")
                        .WithMany("Products")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineShoppingSystem.Models.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("SellerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineShoppingSystem.Models.TypeOfLeather", "TypeOfLeather")
                        .WithMany("Products")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.RoleUser", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.RoleUserGroup", "RoleUserGroup")
                        .WithMany("RoleUsers")
                        .HasForeignKey("RoleUserGroupId");

                    b.HasOne("OnlineShoppingSystem.Models.User", "User")
                        .WithMany("RoleUsers")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.Tax", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.User", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.City")
                        .WithMany("ListOfUser")
                        .HasForeignKey("CityId");

                    b.HasOne("OnlineShoppingSystem.Models.Country")
                        .WithMany("ListOfUser")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("OnlineShoppingSystem.Models.UserAdress", b =>
                {
                    b.HasOne("OnlineShoppingSystem.Models.City", "City")
                        .WithMany("UserAdresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineShoppingSystem.Models.Country", "Country")
                        .WithMany("UserAdresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineShoppingSystem.Models.User", "User")
                        .WithMany("UserAdresses")
                        .HasForeignKey("USerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
